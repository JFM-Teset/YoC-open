
## 第一部分： 基础信息
name: srtp                                          # <必选项> 包名称 （符合C语言变量命名规则），长度少于等于64字节
description: libsrtp是一个实现SRTP协议(Secure Real-time Transport Protocol，安全实时传输协议)的库。 # <必选项> 建议至少20字以上
type: common                                        # <可选项> 组件类型，为：solution, chip, board, common，缺省值 common

tag: 网络组件                                       # <可选项> 组件分类，缺省值： ''
keywords:                                           # <可选项> 标签，会影响到组件被搜索的效果，合理的标签很重要
  - RTP
  - Security
yoc_version: ['v7.2', 'v7.3']

## 第二部分：依赖信息
#           指定该组件依赖的组件及版本，版本支持条件比较，支持：>=v1.0, >v1.0, ==v1.0, <=v1.0, <v1.0, v1.0
#           未指定条件时，默认为 ==，如 v1.0 与 ==v1.0
# depends:                                 # <可选项> 该组件依赖其他的组件，合理的依赖才能保证组件能编译、使用
#   - minilibc: v7.2.0
#   - aos: >=v7.2.0
depends:
  - csi: V7.2.2
  - rhino: V7.2.2
  - minilibc: V7.2.2
  - aos: V7.2.2

## 第四部分：编译连接信息
# build_config:                            # <可选项> 编译配置项
#   include:                               # <可选项> 编译时，影响编译器的-I 参数 ,全局有效
#     - src                                #        include 只能是该软件包下的目录，不能使用外部目录
#   internal_include:                      # <可选项> 编译时，影响编译器的-I 参数 ,组件内有效
#     - include
#   cflag: ''                              # <可选项> C 编译器所需要要的编译参数
#   cxxflag: ''                            # <可选项> CXX 编译器所需要要的编译参数
#   asmflag: ''                            # <可选项> 汇编器所需要要参数
#   define:                                # <可选项> 宏定义, 增加编译器的-D 选项,如：
#     XXX: 1                               #   -DXXX=1
#     AAA: 1                               #   -DAAA
#     STR: "abc"                           #   -DSTR="abc"
#   libs:                                  # 该组件中支持的二进制静态库,如：libxxx.a, libyyy.a
#     - xxx                                #   -lxxx
#     - yyy                                #   -lyyy
#   libpath:                               # 指定静态库所在的路径（相对于该组件路径）
#     - libs                               #   -Llibs
build_config:
  include:
    - libsrtp-2.2.0/include
    - libsrtp-2.2.0/test/include
    - libsrtp-2.2.0/crypto/include

# source_file:                             # <可选项> 指定参与编译的源代码文件，支持通配符，采用相对路径
#   - src/*.c                              # 例：组件 src 目录下所有的扩展名为 c 的源代码文件
source_file:
# libcrypt.a (the crypto engine)
  - "libsrtp-2.2.0/crypto/cipher/cipher.c"
  - "libsrtp-2.2.0/crypto/cipher/null_cipher.c"
  - "libsrtp-2.2.0/crypto/cipher/aes.c"
  # - libsrtp-2.2.0/crypto/cipher/aes_icm_ossl.c
  # - libsrtp-2.2.0/crypto/cipher/aes_gcm_ossl.c
  - "libsrtp-2.2.0/crypto/cipher/aes_icm.c"

# hashes
  - "libsrtp-2.2.0/crypto/hash/null_auth.c"
  - "libsrtp-2.2.0/crypto/hash/sha1.c"
  - "libsrtp-2.2.0/crypto/hash/hmac.c"
  # - libsrtp-2.2.0/crypto/hash/hmac_ossl.c
  - "libsrtp-2.2.0/crypto/hash/auth.c"
  # 0 crypto/hash/tmmhv2.c

# replay
  - "libsrtp-2.2.0/crypto/replay/rdb.c"
  - "libsrtp-2.2.0/crypto/replay/rdbx.c"
  - "libsrtp-2.2.0/crypto/replay/ut_sim.c"

# math
  - "libsrtp-2.2.0/crypto/math/datatypes.c"
  - "libsrtp-2.2.0/crypto/math/stat.c"

# kernel =
  - "libsrtp-2.2.0/crypto/kernel/crypto_kernel.c"
  - "libsrtp-2.2.0/crypto/kernel/alloc.c"
  - "libsrtp-2.2.0/crypto/kernel/key.c"
  - "libsrtp-2.2.0/crypto/kernel/err.c"
  #- libsrtp-2.2.0/crypto/rng/rand_source.c
  #- libsrtp-2.2.0/crypto/rng/prng.c
  #- libsrtp-2.2.0/crypto/rng/ctr_prng.c

# srtp
  - "libsrtp-2.2.0/srtp/srtp.c"
  - "libsrtp-2.2.0/srtp/ekt.c"

## 第五部分：配置信息
# def_config:                              # 组件的可配置项
#   CONFIG_DEBUG: y
#   CONFIG_PARAM_NOT_CHECK: y
#   CONFIG_CLI: y

## 第六部分：安装信息
# install:
#   - dest: include/                       # 安装的目的路径 dest是相当路径，通常是相对于YoC SDK 安装目录
#     source:                              # 安装源列表
#      - src/*.h                           # 支持通配符，相对路径
install:
  - dest: "include/srtp"
    source:
      - "ibsrtp-2.2.0/include/*.h"

## 第七部分：导出部分
# export:
#   - dest: "<SOLUTION_PATH>/generated/data" # 安装的目的路径 dest是相当路径
#     source:                                # 安装源列表
#       - "bootimgs/boot"
#       - "bootimgs/tee"
#       - "bootimgs/mtb"
#       - "configs/config.yaml"
